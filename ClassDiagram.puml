@startuml
top to bottom direction
skinparam linetype ortho

' ===== Model Hierarchy =====
abstract class Model {
    +Model(double initValue)
    +Model(const Model& model)
    +Model& operator=(const Model& model)
    +virtual bool operator==(const Model& model) const = 0
    +virtual ~Model() = default
    +virtual double drift(double time, double assetPrice) const = 0
    +virtual double diffusion(double time, double assetPrice) const = 0
    +virtual Model* clone() const = 0
    +double initValue() const
    #double _initValue
}

class BlackScholesModel {
    +BlackScholesModel(double spot, const DiscountCurve& discountCurve, double sigma)
    +BlackScholesModel(const BlackScholesModel& model)
    +BlackScholesModel* clone() const override
    +BlackScholesModel& operator=(const BlackScholesModel& model)
    +bool operator==(const Model& model) const override
    +double drift(double time, double assetPrice) const override
    +double diffusion(double time, double assetPrice) const override
    +double getDrift() const
    +double getVolatility() const
    -double _drift
    -double _volatility
}

class DupireModel {
    +DupireModel(double spot, const VolatilitySurface& volSurface)
    +DupireModel(const DupireModel& model)
    +DupireModel* clone() const override
    +DupireModel& operator=(const DupireModel& model)
    +bool operator==(const Model& model) const override
    +double drift(double time, double assetPrice) const override
    +double diffusion(double time, double assetPrice) const override
    +const VolatilitySurface& getVolatilitySurface() const
    +double getLocalVolatility(double spot, double time) const
    -const VolatilitySurface* _volSurfacePtr
}

class HullWhiteModel {
    ' For stochastic interest rate models
    ' TODO: Implementation pending
}

BlackScholesModel --|> Model
DupireModel --|> Model
HullWhiteModel --|> Model

' Force vertical stacking for Model group
Model -[hidden]down- BlackScholesModel
BlackScholesModel -[hidden]down- DupireModel
DupireModel -[hidden]down- HullWhiteModel

' ===== Financial Instrument Hierarchy =====
abstract class FinancialInstrument {
    +virtual FinancialInstrument* clone() const = 0
    +virtual ~FinancialInstrument() = default
}

abstract class Option {
    +enum class Type { Call, Put }
    +explicit Option(Option::Type type)
    +Option() = default
    +virtual Type getType() const = 0
    +virtual Option* clone() const override = 0
    #Type _type
}

class EuropeanOptionPayoff {
    +EuropeanOptionPayoff(Type type)
    +EuropeanOptionPayoff(Type type, double strike, double maturity)
    +Option::Type getType() const override
    +EuropeanOptionPayoff* clone() const override
    +virtual double strike() const
    +virtual double maturity() const
    -double _strike
    -double _maturity
}

class AmericanOption {
    ' TODO: Implementation pending
    ' Will use finite difference methods
}

FinancialInstrument <|-- Option
Option <|-- EuropeanOptionPayoff
Option <|-- AmericanOption

' Force vertical stacking for FinancialInstrument group
FinancialInstrument -[hidden]down- Option
Option -[hidden]down- EuropeanOptionPayoff
EuropeanOptionPayoff -[hidden]down- AmericanOption

' ===== Discount Curve Hierarchy =====
abstract class DiscountCurve {
    +virtual double discount(double time) const = 0
    +virtual DiscountCurve* clone() const = 0
    +virtual ~DiscountCurve() = default
}

class FlatDiscountCurve {
    +FlatDiscountCurve(double rate)
    +double discount(double time) const override
    +double rate() const
    +FlatDiscountCurve* clone() const override
    -double _rate
}

FlatDiscountCurve --|> DiscountCurve

' ===== Interpolation Schemes Hierarchy =====
abstract class InterpolationSchemes {
    +virtual ~InterpolationSchemes() = default
    +virtual double interpolate(double x) const = 0
    +virtual InterpolationSchemes* clone() const = 0
    +virtual pair<double, double> getRange() const = 0
    +virtual double extrapolate(double x) const = 0
}

class LinearInterpolation {
    +LinearInterpolation(const vector<double>& xData, const vector<double>& yData)
    +double interpolate(double x) const override
    +InterpolationSchemes* clone() const override
    +pair<double, double> getRange() const override
    +double extrapolate(double x) const override
    -vector<double> _xData, _yData
    -double _xMin, _xMax
    -size_t findInterval(double x) const
}

class CubicSplineInterpolation {
    +enum class BoundaryType { Natural, Clamped, Periodic }
    +CubicSplineInterpolation(const vector<double>& xData, const vector<double>& yData, BoundaryType boundaryType)
    +double interpolate(double x) const override
    +InterpolationSchemes* clone() const override
    +pair<double, double> getRange() const override
    +double extrapolate(double x) const override
    +double derivative(double x) const
    +double secondDerivative(double x) const
    -vector<double> _xData, _yData
    -double _xMin, _xMax
    -BoundaryType _boundaryType
    -vector<double> _alpha, _beta, _gamma, _delta
    -void computeSplineCoefficients()
    -void solveThomasAlgorithm()
    -size_t findInterval(double x) const
}

LinearInterpolation --|> InterpolationSchemes
CubicSplineInterpolation --|> InterpolationSchemes

' Force vertical stacking for InterpolationSchemes group
InterpolationSchemes -[hidden]down- LinearInterpolation
LinearInterpolation -[hidden]down- CubicSplineInterpolation

' ===== Volatility Surface Classes =====
class VolatilitySurface {
    +enum class InterpolationType { Linear, CubicSpline }
    +VolatilitySurface(const vector<double>& strikes, const vector<double>& maturities, const vector<vector<double>>& volatilities, const DiscountCurve& discountCurve, InterpolationType interpolationType)
    +double getImpliedVolatility(double strike, double maturity) const
    +double getImpliedVolatilityForwardMoneyness(double strike, double maturity, double spot) const
    +double getLocalVolatility(double spot, double time) const
    +vector<double> getVolatilitySmile(double maturity, const vector<double>& strikes) const
    +vector<double> getVolatilityTermStructure(double strike, const vector<double>& maturities) const
    +pair<pair<double, double>, pair<double, double>> getBounds() const
    +double getBlackScholesCall(double spot, double strike, double time, double volatility) const
    +double getBlackScholesPut(double spot, double strike, double time, double volatility) const
    +double getBlackScholesVega(double spot, double strike, double time, double volatility) const
    +double getBlackScholesGamma(double spot, double strike, double time, double volatility) const
    +double getBlackScholesTheta(double spot, double strike, double time, double volatility) const
    +double getImpliedVolatilityTimeDerivative(double strike, double maturity) const
    +double getImpliedVolatilityStrikeDerivative(double strike, double maturity) const
    +double getImpliedVolatilitySecondStrikeDerivative(double strike, double maturity) const
    +VolatilitySurface* clone() const
    +bool operator==(const VolatilitySurface& other) const
    +const vector<double>& getStrikes() const
    +const vector<double>& getMaturities() const
    +const vector<vector<double>>& getVolatilities() const
    +const DiscountCurve& getDiscountCurve() const
    -vector<double> _strikes
    -vector<double> _maturities
    -vector<vector<double>> _volatilities
    -InterpolationType _interpolationType
    -unique_ptr<DiscountCurve> _discountCurve
    -vector<unique_ptr<InterpolationSchemes>> _smileInterpolators
    -vector<unique_ptr<InterpolationSchemes>> _termStructureInterpolators
    -void initializeInterpolators()
    -double computeDupireLocalVolatility(double spot, double time) const
    -double blackScholesCall(double spot, double strike, double time, double volatility) const
    -double blackScholesPut(double spot, double strike, double time, double volatility) const
    -double blackScholesVega(double spot, double strike, double time, double volatility) const
    -double blackScholesGamma(double spot, double strike, double time, double volatility) const
    -double blackScholesTheta(double spot, double strike, double time, double volatility) const
    -double getImpliedVolatilityDerivativeTime(double strike, double maturity) const
    -double getImpliedVolatilityDerivativeStrike(double strike, double maturity) const
    -double getImpliedVolatilitySecondDerivativeStrike(double strike, double maturity) const
}

class VolatilitySurfaceBuilder {
    +VolatilitySurfaceBuilder& addStrike(double strike)
    +VolatilitySurfaceBuilder& addMaturity(double maturity)
    +VolatilitySurfaceBuilder& setVolatility(double strike, double maturity, double volatility)
    +VolatilitySurfaceBuilder& setInterpolationType(VolatilitySurface::InterpolationType type)
    +VolatilitySurfaceBuilder& setDiscountCurve(const DiscountCurve& discountCurve)
    +unique_ptr<VolatilitySurface> build()
    -vector<double> _strikes
    -vector<double> _maturities
    -vector<vector<double>> _volatilities
    -VolatilitySurface::InterpolationType _interpolationType
    -unique_ptr<DiscountCurve> _discountCurve
    -void sortAndDeduplicate()
    -void buildVolatilityMatrix()
}

' ===== Pricing Method Hierarchy =====
abstract class Pricer {
    +Pricer() = default
    +Pricer(const Model& model, const DiscountCurve& discountCurve)
    +virtual Pricer* clone() const = 0
    +virtual ~Pricer()
    +virtual double price(const EuropeanOptionPayoff& option) const = 0
    #const Model* _modelPtr
    #const DiscountCurve* _discountCurvePtr
}

class BlackScholesPricer {
    +BlackScholesPricer()
    +BlackScholesPricer(const BlackScholesModel& model, const DiscountCurve& discountCurve)
    +BlackScholesPricer* clone() const override
    +double price(const EuropeanOptionPayoff& option) const override
    +static double d1(double spot, double strike, double r, double sigma, double T)
    +static double d2(double d1, double sigma, double T)
    #const BlackScholesModel* _bsModelPtr
}

class MonteCarloPricer {
    +MonteCarloPricer() = default
    +MonteCarloPricer(const Model& model, const DiscountCurve& discountCurve, const PathSimulator& simulator, size_t numPaths)
    +MonteCarloPricer* clone() const override
    +double price(const EuropeanOptionPayoff& option) const override
    #size_t _numPaths
    #const PathSimulator* _simulatorPtr
}

BlackScholesPricer --|> Pricer
MonteCarloPricer --|> Pricer

' Force vertical stacking for Pricer group
Pricer -[hidden]down- BlackScholesPricer
BlackScholesPricer -[hidden]down- MonteCarloPricer

' ===== Path Simulator Hierarchy =====
class PathSimulator {
    +PathSimulator(const vector<double>& timeSteps, const Model& model, size_t randomSeed)
    +virtual ~PathSimulator()
    +vector<double> path() const
    +virtual double nextStep(size_t timeIndex, double assetPrice) const = 0
    +const vector<double>& timeSteps() const
    #bool timeStepsSanityCheck() const
    #vector<double> _timeSteps
    #const Model* _modelPtr
    #mutable default_random_engine _randomEngine
}

class EulerPathSimulator {
    +EulerPathSimulator(const vector<double>& timeSteps, const Model& model, size_t randomSeed)
    +double nextStep(size_t timeIndex, double assetPrice) const override
}

class MilsteinPathSimulator {
    +MilsteinPathSimulator(const vector<double>& timeSteps, const Model& model, size_t randomSeed)
    +double nextStep(size_t timeIndex, double assetPrice) const override
}

EulerPathSimulator --|> PathSimulator
MilsteinPathSimulator --|> PathSimulator

' Force vertical stacking for PathSimulator group
PathSimulator -[hidden]down- EulerPathSimulator
EulerPathSimulator -[hidden]down- MilsteinPathSimulator

' ===== Utils Class =====
class Utils {
    +static double stdNormCdf(double x)
}

' ===== Relationships between hierarchies =====
Pricer --> Model : uses
Pricer --> DiscountCurve : uses
MonteCarloPricer --> PathSimulator : uses
PathSimulator --> Model : uses
BlackScholesPricer --> Utils : uses
DupireModel --> VolatilitySurface : uses
VolatilitySurface --> DiscountCurve : uses
VolatilitySurface --> InterpolationSchemes : uses
VolatilitySurfaceBuilder --> DiscountCurve : uses
VolatilitySurfaceBuilder ..> VolatilitySurface : creates

' ===== Horizontal spacing between hierarchies =====
Model -[hidden]right- FinancialInstrument
FinancialInstrument -[hidden]right- DiscountCurve
DiscountCurve -[hidden]right- InterpolationSchemes
InterpolationSchemes -[hidden]right- VolatilitySurface
VolatilitySurface -[hidden]right- Pricer
Pricer -[hidden]right- PathSimulator
PathSimulator -[hidden]right- Utils

@enduml